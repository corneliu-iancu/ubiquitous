/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ExchangeInterface extends ethers.utils.Interface {
  functions: {
    "atomicMatch(uint256)": FunctionFragment;
    "getMarketItems()": FunctionFragment;
    "listNft(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "atomicMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listNft",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "atomicMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNft", data: BytesLike): Result;

  events: {};
}

export class Exchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ExchangeInterface;

  functions: {
    atomicMatch(
      listingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMarketItems(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber, string, string, BigNumber, boolean] & {
          ligtingId: BigNumber;
          contractAddress: string;
          tokenId: BigNumber;
          seller: string;
          owner: string;
          price: BigNumber;
          sold: boolean;
        })[]
      ]
    >;

    listNft(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  atomicMatch(
    listingId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMarketItems(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber, string, string, BigNumber, boolean] & {
      ligtingId: BigNumber;
      contractAddress: string;
      tokenId: BigNumber;
      seller: string;
      owner: string;
      price: BigNumber;
      sold: boolean;
    })[]
  >;

  listNft(
    contractAddress: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    atomicMatch(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMarketItems(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, string, string, BigNumber, boolean] & {
        ligtingId: BigNumber;
        contractAddress: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
        sold: boolean;
      })[]
    >;

    listNft(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    atomicMatch(
      listingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMarketItems(overrides?: CallOverrides): Promise<BigNumber>;

    listNft(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    atomicMatch(
      listingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMarketItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listNft(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
